#!/bin/bash


function submodule_update () {
  set -e
  for m in modules/*; do
    git submodule update $m
    cd $m
    branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ -z "$branch" ]] || [[ $branch == "HEAD" ]]; then
      unset branch
      commit=$(git rev-parse HEAD)
      git fetch --quiet
      branches=$(git branch --no-color --no-column --format "%(refname:lstrip=2)" --contains $commit|cat|sed '/HEAD/d'|sed -r '/^\s*$/d')
      nb=$(echo "$branches" |wc -l)
      if [[ -z "$branches" ]]; then
        git fetch --all --quiet
        branches=$(git branch -a --no-color --no-column --format "%(refname:lstrip=3)" --contains $commit|cat|sed '/HEAD/d'|sed -r '/^\s*$/d')
        nb=$(echo "$branches" |wc -l)
      fi

      if [[ $nb -eq 0 ]]; then
        echo "no branches found"
        exit 1
      elif [[ $nb -eq 1 ]]; then
        branch=$branches
      else
        echo "Found $nb branch(es): "$branches
        exit 1
      fi
            
      git fetch origin $branch:$branch
      git checkout --quiet ${branch}
    fi
    echo "$m : $branch" 
    cd $OLDPWD
  done
}

function docker_build () {
  set -e

  print_usage()
  {
    printf "usage: docker_build --env-file=my-env-file"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  # if [ -z "$env_files" ]; then
  #   print_usage
  #   exit 1
  # fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$DOCKER_BUILD_REPOSITORY" ]; then
    echo "environment var named DOCKER_BUILD_REPOSITORY is required" && exit 1
  fi

  if [ -z "$DOCKER_BUILD_TAG" ]; then
    echo "environment var named DOCKER_BUILD_TAG is required" && exit 1
  fi

  if [ -z "$DOCKER_BUILD_DOCKERFILE" ]; then
    echo "environment var named DOCKER_BUILD_DOCKERFILE is required" && exit 1
  fi

  if [ -z "$DOCKER_BUILD_CONTEXT" ]; then
    echo "environment var named DOCKER_BUILD_CONTEXT is required" && exit 1
  fi

  set -x
  DOCKER_BUILDKIT=1 docker build \
    ${DOCKER_BUILD_TARGET:+--target=$DOCKER_BUILD_TARGET} \
    --build-arg BUILDKIT_INLINE_CACHE=1 \
    ${DOCKER_BUILD_ARG_01:+--build-arg $DOCKER_BUILD_ARG_01} \
    ${DOCKER_BUILD_ARG_02:+--build-arg $DOCKER_BUILD_ARG_02} \
    ${DOCKER_BUILD_ARG_03:+--build-arg $DOCKER_BUILD_ARG_03} \
    ${DOCKER_BUILD_ARG_04:+--build-arg $DOCKER_BUILD_ARG_04} \
    ${DOCKER_BUILD_ARG_05:+--build-arg $DOCKER_BUILD_ARG_05} \
    ${DOCKER_BUILD_ARG_06:+--build-arg $DOCKER_BUILD_ARG_06} \
    ${DOCKER_BUILD_ARG_07:+--build-arg $DOCKER_BUILD_ARG_07} \
    ${DOCKER_BUILD_ARG_08:+--build-arg $DOCKER_BUILD_ARG_08} \
    ${DOCKER_BUILD_ARG_09:+--build-arg $DOCKER_BUILD_ARG_09} \
    ${DOCKER_BUILD_ARG_10:+--build-arg $DOCKER_BUILD_ARG_10} \
    ${DOCKER_BUILD_ARG_11:+--build-arg $DOCKER_BUILD_ARG_11} \
    ${DOCKER_BUILD_ARG_12:+--build-arg $DOCKER_BUILD_ARG_12} \
    ${DOCKER_BUILD_ARG_13:+--build-arg $DOCKER_BUILD_ARG_13} \
    ${DOCKER_BUILD_ARG_14:+--build-arg $DOCKER_BUILD_ARG_14} \
    ${DOCKER_BUILD_ARG_15:+--build-arg $DOCKER_BUILD_ARG_15} \
    ${DOCKER_BUILD_ARG_16:+--build-arg $DOCKER_BUILD_ARG_16} \
    ${DOCKER_BUILD_ARG_17:+--build-arg $DOCKER_BUILD_ARG_17} \
    ${DOCKER_BUILD_ARG_18:+--build-arg $DOCKER_BUILD_ARG_18} \
    ${DOCKER_BUILD_ARG_19:+--build-arg $DOCKER_BUILD_ARG_19} \
    ${DOCKER_BUILD_ARG_20:+--build-arg $DOCKER_BUILD_ARG_20} \
    ${DOCKER_BUILD_SECRET_01:+--secret $DOCKER_BUILD_SECRET_01} \
    ${DOCKER_BUILD_SECRET_02:+--secret $DOCKER_BUILD_SECRET_02} \
    ${DOCKER_BUILD_SECRET_03:+--secret $DOCKER_BUILD_SECRET_03} \
    ${DOCKER_BUILD_SECRET_04:+--secret $DOCKER_BUILD_SECRET_04} \
    ${DOCKER_BUILD_SECRET_05:+--secret $DOCKER_BUILD_SECRET_05} \
    ${DOCKER_BUILD_SECRET_06:+--secret $DOCKER_BUILD_SECRET_06} \
    ${DOCKER_BUILD_SECRET_07:+--secret $DOCKER_BUILD_SECRET_07} \
    ${DOCKER_BUILD_SECRET_08:+--secret $DOCKER_BUILD_SECRET_08} \
    ${DOCKER_BUILD_SECRET_09:+--secret $DOCKER_BUILD_SECRET_09} \
    ${DOCKER_BUILD_SECRET_10:+--secret $DOCKER_BUILD_SECRET_10} \
    ${DOCKER_BUILD_SECRET_11:+--secret $DOCKER_BUILD_SECRET_11} \
    ${DOCKER_BUILD_SECRET_12:+--secret $DOCKER_BUILD_SECRET_12} \
    ${DOCKER_BUILD_SECRET_13:+--secret $DOCKER_BUILD_SECRET_13} \
    ${DOCKER_BUILD_SECRET_14:+--secret $DOCKER_BUILD_SECRET_14} \
    ${DOCKER_BUILD_SECRET_15:+--secret $DOCKER_BUILD_SECRET_15} \
    ${DOCKER_BUILD_SECRET_16:+--secret $DOCKER_BUILD_SECRET_16} \
    ${DOCKER_BUILD_SECRET_17:+--secret $DOCKER_BUILD_SECRET_17} \
    ${DOCKER_BUILD_SECRET_18:+--secret $DOCKER_BUILD_SECRET_18} \
    ${DOCKER_BUILD_SECRET_19:+--secret $DOCKER_BUILD_SECRET_19} \
    ${DOCKER_BUILD_SECRET_20:+--secret $DOCKER_BUILD_SECRET_20} \
    --cache-from $DOCKER_BUILD_REPOSITORY:latest \
    --tag $DOCKER_BUILD_REPOSITORY:$DOCKER_BUILD_TAG \
    --file $DOCKER_BUILD_DOCKERFILE \
    --compress \
    $DOCKER_BUILD_CONTEXT
  docker tag $DOCKER_BUILD_REPOSITORY:$DOCKER_BUILD_TAG $DOCKER_BUILD_REPOSITORY:latest
  set +x
}

function push_images () {
  set -e
  red='\033[1;31m'; blue='\033[34m'; reset='\033[0m'

  print_usage()
  {
    printf "usage: push_images --env-file=my-env-file"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --pretty-print)
        pretty_print=1
        ;;
      --debug)
        debug=1
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  # if [ -z "$env_files" ]; then
  #   print_usage
  #   exit 1
  # fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$DOCKER_BUILD_REPOSITORY" ]; then
    echo "environment var named DOCKER_BUILD_REPOSITORY is required" && exit 1
  fi

  if [ -z "$DOCKER_BUILD_TAG" ]; then
    echo "environment var named DOCKER_BUILD_TAG is required" && exit 1
  fi

  if [ -z "$KIND_CLUSTER_NAME" ]; then
    echo "environment var named KIND_CLUSTER_NAME is required" && exit 1
  fi

  if [ -z "$KIND_NODES" ]; then
    echo "environment var named KIND_NODES is required" && exit 1
  fi

  IMAGE_ID=$(docker inspect ${DOCKER_BUILD_REPOSITORY}:${DOCKER_BUILD_TAG} --format='{{.Id}}')

  # if [[ -n "$debug" ]]; then
    jo \
      KIND_CLUSTER_NAME=$KIND_CLUSTER_NAME \
      KIND_NODES="$KIND_NODES" \
      DOCKER_BUILD_REPOSITORY=$DOCKER_BUILD_REPOSITORY \
      DOCKER_BUILD_TAG=$DOCKER_BUILD_TAG \
      IMAGE_ID=$IMAGE_ID|yq e -P
    echo
  # fi

  for i in $KIND_NODES
  do
    # docker exec -it $i ctr --namespace=k8s.io image ls
    command='images=$(docker exec -it $i crictl image --no-trunc); echo "$images"|sed -n 1p; echo "$images"|sed -n "/^${DOCKER_BUILD_REPOSITORY//\//\\/}\s/p"'
    if [[ -n "$debug" ]]; then print_info --type=command --text="$command"; fi
    output=$(eval "$command")
    if [[ -n "$pretty_print" ]]; then print_info --type=output --text="$output"; fi

    command="docker exec -it $i crictl inspecti --output go-template --template '{{.status.id}}' $IMAGE_ID"
    if [[ -n "$debug" ]]; then print_info --type=command --text="$command"; fi
    set +e
    # output=$(set +e && eval "$command")
    output=$(eval "$command")
    return_code=$?
    set -e
    # if [[ -n "$pretty_print" ]]; then print_info --type=warning --text="$output"; fi
    if [[ $return_code -ne 0 ]]; then
      print_info --type=warning --text="no such image $IMAGE_ID present on $i"
      command="kind load docker-image ${DOCKER_BUILD_REPOSITORY}:${DOCKER_BUILD_TAG} --name ${KIND_CLUSTER_NAME} --nodes $i"
      if [[ -n "$debug" ]]; then print_info --type=command --text="$command"; fi
      output=$(eval "$command")
      if [[ -n "$pretty_print" ]]; then print_info --type=output --text="$output"; fi
    else
      print_info --type=warning --text="image $IMAGE_ID present on $i"
      command="docker exec -it $i ctr --namespace=k8s.io images tag $IMAGE_ID ${DOCKER_BUILD_REPOSITORY}:${DOCKER_BUILD_TAG}"
      if [[ -n "$debug" ]]; then print_info --type=command --text="$command"; fi
      set +e
      output=$(eval "$command")
      # output=$(set +e && eval "$command")
      set -e
      if [[ -n "$pretty_print" ]]; then print_info --type=output --text="$output"; fi
    fi
    # docker exec -it $i crictl rmi $IMAGE_ID
  done
}

function print_info () {
  set -e
  red='\033[1;31m'; blue='\033[34m'; yellow='\033[33m'; reset='\033[0m'

  print_usage()
  {
    printf "usage: print_info --type=command --text=text"
  }

  while [ $# -gt 0 ]; do
    case "$1" in
      --type*)
        type="${1#*=}"
        ;;
      --text*)
        text="${1#*=}"
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  if [[ $type == "command" ]]; then
    printf "$red%s$reset\n\n" "$(echo $text | sed ':a;N;$!ba;s#\\\n##g')"
  elif [[ $type == "output" ]]; then
    printf "$blue%s$reset\n\n" "${text}"
  elif [[ $type == "warning" ]]; then
    printf "$yellow%s$reset\n\n" "${text}"
  fi
}

function crictl_images () {
  set -e

  print_usage()
  {
    printf "usage: crictl_images --env-file=my-env-file"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  # if [ -z "$env_files" ]; then
  #   print_usage
  #   exit 1
  # fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$KIND_CLUSTER_NAME" ]; then
    echo "environment var named KIND_CLUSTER_NAME is required" && exit 1
  fi

  if [ -z "$KIND_NODES" ]; then
    echo "environment var named KIND_NODES is required" && exit 1
  fi

  for i in $KIND_NODES
  do
    docker exec -it $i crictl images
  done
}

function helm_repo_add () {
  set -e

  print_usage()
  {
    printf "usage: helm_repo_add --env-file=my-env-file --pretty-print --debug"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --pretty-print)
        pretty_print=1
        ;;
      --debug)
        debug=1
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  # if [ -z "$env_files" ]; then
  #   print_usage
  #   exit 1
  # fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$HELM_REPO_NAME" ]; then
    echo "environment var named HELM_REPO_NAME is required" && exit 1
  fi

  if [ -z "$HELM_REPO_URL" ]; then
    echo "environment var named HELM_REPO_URL is required" && exit 1
  fi

command=$(cat <<EOF
    helm repo add --force-update $HELM_REPO_NAME $HELM_REPO_URL
EOF
)

  if [[ -n "$debug" ]]; then print_info --type=command --text="$command"; fi
  output=$(eval "$command")
  if [[ -n "$pretty_print" ]]; then print_info --type=output --text="$output"; fi
}

function pull_push_images () {
  set -e

  print_usage()
  {
    printf "usage: pull_push_images --env-file=my-env-file --pretty-print --debug"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --pretty-print)
        pretty_print=1
        ;;
      --debug)
        debug=1
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  # if [ -z "$env_files" ]; then
  #   print_usage
  #   exit 1
  # fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  args=
  for i in "${env_files[@]}"
  do 
    args="$args $(echo -n '--env-file='$i)"
  done

  images=$(helm_template $args|sed -rn '/\s+image:\s+"?[a-zA-Z0-9\./:-]+.*/p'|sed -r 's#\s+image:\s+"?([a-zA-Z0-9\./:-]+).*#\1#'|sort -u)
  for image in $images; do \
    command="docker pull $image"
    if [[ -n "$debug" ]]; then echo -e "\e[1;31m$command\e[0m"; fi
    echo -e "\e[1;34m"
    docker pull $image
    echo -e "\e[0m";
    tempfile_envfile=$(mktemp /tmp/envfile.XXXXXXXXXX)
    trap "rm -Rf $tempfile_envfile" 0 2 3 15
    echo "DOCKER_BUILD_REPOSITORY=$(echo $image|cut -d':' -f1)" >> $tempfile_envfile
    echo "DOCKER_BUILD_TAG=$(echo $image|cut -d':' -f2)" >> $tempfile_envfile
    push_images $args --env-file=$tempfile_envfile ${pretty_print:+--pretty-print} ${debug:+--debug}
	done

}

function helm_template () {
  set -e

  print_usage()
  {
    printf "usage: helm_template --env-file=my-env-file --pretty-print --debug"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --pretty-print)
        pretty_print=1
        ;;
      --debug)
        debug=1
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  # if [ -z "$env_files" ]; then
  #   print_usage
  #   exit 1
  # fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$KUBE_CONTEXT" ]; then
    echo "environment var named KUBE_CONTEXT is required" && exit 1
  fi

  if [ -z "$HELM_RELEASE" ]; then
    echo "environment var named HELM_RELEASE is required" && exit 1
  fi

  if [ -z "$HELM_CHART" ]; then
    echo "environment var named HELM_CHART is required" && exit 1
  fi

  if [ -z "$HELM_NAMESPACE" ]; then
    echo "environment var named HELM_NAMESPACE is required" && exit 1
  fi

  # --validate \
  command=$(cat <<EOF
    helm template \
		--kube-context $KUBE_CONTEXT \
    --namespace ${HELM_NAMESPACE} \
    ${HELM_VERSION:+--version $HELM_VERSION} \
    ${HELM_VALUES_01:+--values $HELM_VALUES_01} \
    ${HELM_VALUES_02:+--values $HELM_VALUES_02} \
    ${HELM_VALUES_03:+--values $HELM_VALUES_03} \
    ${HELM_VALUES_04:+--values $HELM_VALUES_04} \
    ${HELM_VALUES_05:+--values $HELM_VALUES_05} \
    ${HELM_VALUES_06:+--values $HELM_VALUES_06} \
    ${HELM_VALUES_07:+--values $HELM_VALUES_07} \
    ${HELM_VALUES_08:+--values $HELM_VALUES_08} \
    ${HELM_VALUES_09:+--values $HELM_VALUES_09} \
    ${HELM_VALUES_10:+--values $HELM_VALUES_10} \
    ${HELM_VALUES_11:+--values $HELM_VALUES_11} \
    ${HELM_VALUES_12:+--values $HELM_VALUES_12} \
    ${HELM_VALUES_13:+--values $HELM_VALUES_13} \
    ${HELM_VALUES_14:+--values $HELM_VALUES_14} \
    ${HELM_VALUES_15:+--values $HELM_VALUES_15} \
    ${HELM_VALUES_16:+--values $HELM_VALUES_16} \
    ${HELM_VALUES_17:+--values $HELM_VALUES_17} \
    ${HELM_VALUES_18:+--values $HELM_VALUES_18} \
    ${HELM_VALUES_19:+--values $HELM_VALUES_19} \
    ${HELM_VALUES_20:+--values $HELM_VALUES_20} \
    ${HELM_SET_01:+--set $HELM_SET_01} \
    ${HELM_SET_02:+--set $HELM_SET_02} \
    ${HELM_SET_03:+--set $HELM_SET_03} \
    ${HELM_SET_04:+--set $HELM_SET_04} \
    ${HELM_SET_05:+--set $HELM_SET_05} \
    ${HELM_SET_06:+--set $HELM_SET_06} \
    ${HELM_SET_07:+--set $HELM_SET_07} \
    ${HELM_SET_08:+--set $HELM_SET_08} \
    ${HELM_SET_09:+--set $HELM_SET_09} \
    ${HELM_SET_10:+--set $HELM_SET_10} \
    ${HELM_SET_11:+--set $HELM_SET_11} \
    ${HELM_SET_12:+--set $HELM_SET_12} \
    ${HELM_SET_13:+--set $HELM_SET_13} \
    ${HELM_SET_14:+--set $HELM_SET_14} \
    ${HELM_SET_15:+--set $HELM_SET_15} \
    ${HELM_SET_16:+--set $HELM_SET_16} \
    ${HELM_SET_17:+--set $HELM_SET_17} \
    ${HELM_SET_18:+--set $HELM_SET_18} \
    ${HELM_SET_19:+--set $HELM_SET_19} \
    ${HELM_SET_20:+--set $HELM_SET_20} \
    ${pretty_print:+--dry-run} \
    ${pretty_print:+--debug} \
		--name-template=${HELM_RELEASE} \
    ${HELM_CHART}
EOF
)
  
  if [[ -n "$debug" ]]; then echo -e "\e[1;31m$(echo $command | sed ':a;N;$!ba;s#\\\n##g')\e[0m"; fi
  output=$(eval "$command")

  echo "$output"|yq eval -P
}

function helm_upgrade () {
  set -e

  print_usage()
  {
    printf "usage: helm_upgrade --env-file=my-env-file --debug"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --debug)
        debug=1
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  # if [ -z "$env_files" ]; then
  #   print_usage
  #   exit 1
  # fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$KUBE_CONTEXT" ]; then
    echo "environment var named KUBE_CONTEXT is required" && exit 1
  fi

  if [ -z "$HELM_NAMESPACE" ]; then
    echo "environment var named HELM_NAMESPACE is required" && exit 1
  fi

  if [ -z "$HELM_RELEASE" ]; then
    echo "environment var named HELM_RELEASE is required" && exit 1
  fi

  if [ -z "$HELM_CHART" ]; then
    echo "environment var named HELM_CHART is required" && exit 1
  fi

  command=$(cat <<EOF
	helm upgrade \
		--kube-context $KUBE_CONTEXT \
		--install \
		--wait \
		--create-namespace \
		--namespace ${HELM_NAMESPACE} \
    ${HELM_REUSE_VALUES:+--reuse-values} \
    ${HELM_VERSION:+--version $HELM_VERSION} \
    ${HELM_VALUES_01:+--values $HELM_VALUES_01} \
    ${HELM_VALUES_02:+--values $HELM_VALUES_02} \
    ${HELM_VALUES_03:+--values $HELM_VALUES_03} \
    ${HELM_VALUES_04:+--values $HELM_VALUES_04} \
    ${HELM_VALUES_05:+--values $HELM_VALUES_05} \
    ${HELM_VALUES_06:+--values $HELM_VALUES_06} \
    ${HELM_VALUES_07:+--values $HELM_VALUES_07} \
    ${HELM_VALUES_08:+--values $HELM_VALUES_08} \
    ${HELM_VALUES_09:+--values $HELM_VALUES_09} \
    ${HELM_VALUES_10:+--values $HELM_VALUES_10} \
    ${HELM_VALUES_11:+--values $HELM_VALUES_11} \
    ${HELM_VALUES_12:+--values $HELM_VALUES_12} \
    ${HELM_VALUES_13:+--values $HELM_VALUES_13} \
    ${HELM_VALUES_14:+--values $HELM_VALUES_14} \
    ${HELM_VALUES_15:+--values $HELM_VALUES_15} \
    ${HELM_VALUES_16:+--values $HELM_VALUES_16} \
    ${HELM_VALUES_17:+--values $HELM_VALUES_17} \
    ${HELM_VALUES_18:+--values $HELM_VALUES_18} \
    ${HELM_VALUES_19:+--values $HELM_VALUES_19} \
    ${HELM_VALUES_20:+--values $HELM_VALUES_20} \
    ${HELM_SET_01:+--set $HELM_SET_01} \
    ${HELM_SET_02:+--set $HELM_SET_02} \
    ${HELM_SET_03:+--set $HELM_SET_03} \
    ${HELM_SET_04:+--set $HELM_SET_04} \
    ${HELM_SET_05:+--set $HELM_SET_05} \
    ${HELM_SET_06:+--set $HELM_SET_06} \
    ${HELM_SET_07:+--set $HELM_SET_07} \
    ${HELM_SET_08:+--set $HELM_SET_08} \
    ${HELM_SET_09:+--set $HELM_SET_09} \
    ${HELM_SET_10:+--set $HELM_SET_10} \
    ${HELM_SET_11:+--set $HELM_SET_11} \
    ${HELM_SET_12:+--set $HELM_SET_12} \
    ${HELM_SET_13:+--set $HELM_SET_13} \
    ${HELM_SET_14:+--set $HELM_SET_14} \
    ${HELM_SET_15:+--set $HELM_SET_15} \
    ${HELM_SET_16:+--set $HELM_SET_16} \
    ${HELM_SET_17:+--set $HELM_SET_17} \
    ${HELM_SET_18:+--set $HELM_SET_18} \
    ${HELM_SET_19:+--set $HELM_SET_19} \
    ${HELM_SET_20:+--set $HELM_SET_20} \
		${HELM_RELEASE} \
		${HELM_CHART}
EOF
)

  if [[ -n "$debug" ]]; then echo -e "\e[1;31m$(echo $command | sed ':a;N;$!ba;s#\\\n##g')\e[0m"; fi
  output=$(eval "$command")

  echo "$output"
}

function helm_get_last_version () {
  set -e

  print_usage()
  {
    printf "usage: helm_get_last_version --env-file=my-env-file"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --pretty-print)
        pretty_print=1
        ;;
      --debug)
        debug=1
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  # if [ -z "$env_files" ]; then
  #   print_usage
  #   exit 1
  # fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$HELM_CHART" ]; then
    echo "environment var named HELM_CHART is required" && exit 1
  fi

  command="helm search repo ${HELM_CHART} --output yaml| yq e '.[0].version' -"
  if [[ -n "$debug" ]]; then print_info --type=command --text="$command"; fi
  output=$(eval "$command")
  repo_name=$(echo $HELM_CHART| cut -d"/" -f1)
  repo_chart=$(echo $HELM_CHART| cut -d"/" -f2)
  repo_url=$(helm repo list --output json|jq -r --arg name $repo_name '.[]|select( .name == $name)|.url')
  jo \
    REPO=$repo_name \
    URL=$repo_url \
    CHART=$repo_chart \
    LAST_VERSION=$output|yq e -P
}

function eval_env_files ()
{
  set -e
  for file in "$@"
  do
    eval $(cat $file)
  done
}

function deploy_helm_chart () {
  set -e

  print_usage()
  {
    printf "usage: deploy --env-file=my-env-file --debug"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --help)
        print_usage
        exit 0
        ;;
      --pretty-print)
        pretty_print=1
        ;;
      --debug)
        debug=1
        ;;
      --add-repo)
        add_repo=1
        ;;
      --get-last-version)
        get_last_version=1
        ;;
      --template)
        template=1
        ;;
      --pull-push-images)
        pull_push_images=1
        ;;
      --push-images)
        push_images=1
        ;;
      --debug)
        debug=1
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  # if [ -z "$env_files" ]; then
  #   print_usage
  #   exit 1
  # fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -n "$add_repo" ]; then
    helm_repo_add
  fi

  if [ -n "$get_last_version" ]; then
    helm_get_last_version
  fi

  if [ -n "$pull_push_images" ]; then
	  pull_push_images
  fi

  if [ -n "$template" ]; then
	  helm_template					${pretty_print:+--pretty-print} ${debug:+--debug}
  fi

	helm_upgrade					${debug:+--debug}
}
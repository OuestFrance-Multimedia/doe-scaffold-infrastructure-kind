#!/bin/bash

function docker_build () {
  set -e

  print_usage()
  {
    printf "usage: docker_build --env-file=my-env-file"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  if [ -z "$env_files" ]; then
    print_usage
    exit 1
  fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$DOCKER_BUILD_REPOSITORY" ]; then
    echo "environment var named DOCKER_BUILD_REPOSITORY is required" && exit 1
  fi

  if [ -z "$DOCKER_BUILD_TAG" ]; then
    echo "environment var named DOCKER_BUILD_TAG is required" && exit 1
  fi

  if [ -z "$DOCKER_BUILD_DOCKERFILE" ]; then
    echo "environment var named DOCKER_BUILD_DOCKERFILE is required" && exit 1
  fi

  if [ -z "$DOCKER_BUILD_CONTEXT" ]; then
    echo "environment var named DOCKER_BUILD_CONTEXT is required" && exit 1
  fi

  DOCKER_BUILDKIT=1 docker build \
    ${DOCKER_BUILD_TARGET:+--target=$DOCKER_BUILD_TARGET} \
    --build-arg BUILDKIT_INLINE_CACHE=1 \
    ${DOCKER_BUILD_ARG_01:+--build-arg $DOCKER_BUILD_ARG_01} \
    ${DOCKER_BUILD_ARG_02:+--build-arg $DOCKER_BUILD_ARG_02} \
    ${DOCKER_BUILD_ARG_03:+--build-arg $DOCKER_BUILD_ARG_03} \
    ${DOCKER_BUILD_ARG_04:+--build-arg $DOCKER_BUILD_ARG_04} \
    ${DOCKER_BUILD_ARG_05:+--build-arg $DOCKER_BUILD_ARG_05} \
    ${DOCKER_BUILD_ARG_06:+--build-arg $DOCKER_BUILD_ARG_06} \
    ${DOCKER_BUILD_ARG_07:+--build-arg $DOCKER_BUILD_ARG_07} \
    ${DOCKER_BUILD_ARG_08:+--build-arg $DOCKER_BUILD_ARG_08} \
    ${DOCKER_BUILD_ARG_09:+--build-arg $DOCKER_BUILD_ARG_09} \
    ${DOCKER_BUILD_ARG_10:+--build-arg $DOCKER_BUILD_ARG_10} \
    ${DOCKER_BUILD_ARG_11:+--build-arg $DOCKER_BUILD_ARG_11} \
    ${DOCKER_BUILD_ARG_12:+--build-arg $DOCKER_BUILD_ARG_12} \
    ${DOCKER_BUILD_ARG_13:+--build-arg $DOCKER_BUILD_ARG_13} \
    ${DOCKER_BUILD_ARG_14:+--build-arg $DOCKER_BUILD_ARG_14} \
    ${DOCKER_BUILD_ARG_15:+--build-arg $DOCKER_BUILD_ARG_15} \
    ${DOCKER_BUILD_ARG_16:+--build-arg $DOCKER_BUILD_ARG_16} \
    ${DOCKER_BUILD_ARG_17:+--build-arg $DOCKER_BUILD_ARG_17} \
    ${DOCKER_BUILD_ARG_18:+--build-arg $DOCKER_BUILD_ARG_18} \
    ${DOCKER_BUILD_ARG_19:+--build-arg $DOCKER_BUILD_ARG_19} \
    ${DOCKER_BUILD_ARG_20:+--build-arg $DOCKER_BUILD_ARG_20} \
    ${DOCKER_BUILD_SECRET_01:+--secret $DOCKER_BUILD_SECRET_01} \
    ${DOCKER_BUILD_SECRET_02:+--secret $DOCKER_BUILD_SECRET_02} \
    ${DOCKER_BUILD_SECRET_03:+--secret $DOCKER_BUILD_SECRET_03} \
    ${DOCKER_BUILD_SECRET_04:+--secret $DOCKER_BUILD_SECRET_04} \
    ${DOCKER_BUILD_SECRET_05:+--secret $DOCKER_BUILD_SECRET_05} \
    ${DOCKER_BUILD_SECRET_06:+--secret $DOCKER_BUILD_SECRET_06} \
    ${DOCKER_BUILD_SECRET_07:+--secret $DOCKER_BUILD_SECRET_07} \
    ${DOCKER_BUILD_SECRET_08:+--secret $DOCKER_BUILD_SECRET_08} \
    ${DOCKER_BUILD_SECRET_09:+--secret $DOCKER_BUILD_SECRET_09} \
    ${DOCKER_BUILD_SECRET_10:+--secret $DOCKER_BUILD_SECRET_10} \
    ${DOCKER_BUILD_SECRET_11:+--secret $DOCKER_BUILD_SECRET_11} \
    ${DOCKER_BUILD_SECRET_12:+--secret $DOCKER_BUILD_SECRET_12} \
    ${DOCKER_BUILD_SECRET_13:+--secret $DOCKER_BUILD_SECRET_13} \
    ${DOCKER_BUILD_SECRET_14:+--secret $DOCKER_BUILD_SECRET_14} \
    ${DOCKER_BUILD_SECRET_15:+--secret $DOCKER_BUILD_SECRET_15} \
    ${DOCKER_BUILD_SECRET_16:+--secret $DOCKER_BUILD_SECRET_16} \
    ${DOCKER_BUILD_SECRET_17:+--secret $DOCKER_BUILD_SECRET_17} \
    ${DOCKER_BUILD_SECRET_18:+--secret $DOCKER_BUILD_SECRET_18} \
    ${DOCKER_BUILD_SECRET_19:+--secret $DOCKER_BUILD_SECRET_19} \
    ${DOCKER_BUILD_SECRET_20:+--secret $DOCKER_BUILD_SECRET_20} \
    --cache-from $DOCKER_BUILD_REPOSITORY:latest \
    --tag $DOCKER_BUILD_REPOSITORY:$DOCKER_BUILD_TAG \
    --file $DOCKER_BUILD_DOCKERFILE \
    --compress \
    $DOCKER_BUILD_CONTEXT

    # docker tag $DOCKER_BUILD_REPOSITORY:$DOCKER_BUILD_TAG $DOCKER_BUILD_REPOSITORY:latest
}

function pull_push_images () {
  set -e

  print_usage()
  {
    printf "usage: pull_push_images --env-file=my-env-file"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  if [ -z "$env_files" ]; then
    print_usage
    exit 1
  fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$DOCKER_BUILD_REPOSITORY" ]; then
    echo "environment var named DOCKER_BUILD_REPOSITORY is required" && exit 1
  fi

  if [ -z "$DOCKER_BUILD_TAG" ]; then
    echo "environment var named DOCKER_BUILD_TAG is required" && exit 1
  fi

  if [ -z "$KIND_CLUSTER_NAME" ]; then
    echo "environment var named KIND_CLUSTER_NAME is required" && exit 1
  fi

  IMAGE_ID=$(docker inspect ${DOCKER_BUILD_REPOSITORY}:${DOCKER_BUILD_TAG} --format='{{.Id}}')

  echo "KIND_CLUSTER_NAME: $KIND_CLUSTER_NAME"
  echo "DOCKER_BUILD_REPOSITORY: $DOCKER_BUILD_REPOSITORY"
  echo "DOCKER_BUILD_TAG: $DOCKER_BUILD_TAG"
  echo "IMAGE_ID: $IMAGE_ID"

  KIND_NODES=$(kind get nodes --name ${KIND_CLUSTER_NAME}|grep -v control-plane)
  for i in $KIND_NODES
  do
    docker exec -it $i ctr --namespace=k8s.io image ls
    docker exec -it $i crictl images
    set +e
    docker exec -it $i crictl inspecti \
      --output go-template \
      --template '{{.status.id}}' $IMAGE_ID
    return_code=$?
    set -e
    if [[ $return_code -ne 0 ]]; then
      kind load docker-image ${DOCKER_BUILD_REPOSITORY}:${DOCKER_BUILD_TAG} --name ${KIND_CLUSTER_NAME} --nodes $i
    else
      set +e
      docker exec -it $i ctr --namespace=k8s.io images tag $IMAGE_ID ${DOCKER_BUILD_REPOSITORY}:${DOCKER_BUILD_TAG}
      set -e
    fi
    # docker exec -it $i crictl rmi $IMAGE_ID
  done
}

function helm_template () {
  set -e

  print_usage()
  {
    printf "usage: helm_template --env-file=my-env-file"
  }

  env_files=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --env-file*)
        env_files+=("${1#*=}")
        ;;
      --help)
        print_usage
        exit 0
        ;;
      *)
        print_usage
        exit 1
    esac
    shift
  done

  if [ -z "$env_files" ]; then
    print_usage
    exit 1
  fi

  for i in "${env_files[@]}"
  do
    eval $(cat $i)
  done

  if [ -z "$KUBE_CONTEXT" ]; then
    echo "environment var named KUBE_CONTEXT is required" && exit 1
  fi

  if [ -z "$HELM_RELEASE_NAME" ]; then
    echo "environment var named HELM_RELEASE_NAME is required" && exit 1
  fi

  if [ -z "$HELM_RELEASE_PATH" ]; then
    echo "environment var named HELM_RELEASE_PATH is required" && exit 1
  fi

	helm template \
		--kube-context $KUBE_CONTEXT \
		--validate \
    ${HELM_VALUES_01:+--values $HELM_VALUES_01} \
    ${HELM_VALUES_02:+--values $HELM_VALUES_02} \
    ${HELM_VALUES_03:+--values $HELM_VALUES_03} \
    ${HELM_VALUES_04:+--values $HELM_VALUES_04} \
    ${HELM_VALUES_05:+--values $HELM_VALUES_05} \
    ${HELM_VALUES_06:+--values $HELM_VALUES_06} \
    ${HELM_VALUES_07:+--values $HELM_VALUES_07} \
    ${HELM_VALUES_08:+--values $HELM_VALUES_08} \
    ${HELM_VALUES_09:+--values $HELM_VALUES_09} \
    ${HELM_VALUES_10:+--values $HELM_VALUES_10} \
    ${HELM_VALUES_11:+--values $HELM_VALUES_11} \
    ${HELM_VALUES_12:+--values $HELM_VALUES_12} \
    ${HELM_VALUES_13:+--values $HELM_VALUES_13} \
    ${HELM_VALUES_14:+--values $HELM_VALUES_14} \
    ${HELM_VALUES_15:+--values $HELM_VALUES_15} \
    ${HELM_VALUES_16:+--values $HELM_VALUES_16} \
    ${HELM_VALUES_17:+--values $HELM_VALUES_17} \
    ${HELM_VALUES_18:+--values $HELM_VALUES_18} \
    ${HELM_VALUES_19:+--values $HELM_VALUES_19} \
    ${HELM_VALUES_20:+--values $HELM_VALUES_20} \
    ${HELM_SET_01:+--set $HELM_SET_01} \
    ${HELM_SET_02:+--set $HELM_SET_02} \
    ${HELM_SET_03:+--set $HELM_SET_03} \
    ${HELM_SET_04:+--set $HELM_SET_04} \
    ${HELM_SET_05:+--set $HELM_SET_05} \
    ${HELM_SET_06:+--set $HELM_SET_06} \
    ${HELM_SET_07:+--set $HELM_SET_07} \
    ${HELM_SET_08:+--set $HELM_SET_08} \
    ${HELM_SET_09:+--set $HELM_SET_09} \
    ${HELM_SET_10:+--set $HELM_SET_10} \
    ${HELM_SET_11:+--set $HELM_SET_11} \
    ${HELM_SET_12:+--set $HELM_SET_12} \
    ${HELM_SET_13:+--set $HELM_SET_13} \
    ${HELM_SET_14:+--set $HELM_SET_14} \
    ${HELM_SET_15:+--set $HELM_SET_15} \
    ${HELM_SET_16:+--set $HELM_SET_16} \
    ${HELM_SET_17:+--set $HELM_SET_17} \
    ${HELM_SET_18:+--set $HELM_SET_18} \
    ${HELM_SET_19:+--set $HELM_SET_19} \
    ${HELM_SET_20:+--set $HELM_SET_20} \
		--name-template=${HELM_RELEASE_NAME} \
		--dry-run --debug ${HELM_RELEASE_PATH}|yq eval -P
}